from __future__ import annotations
import cgi
import io
from bs4 import BeautifulSoup
import disnake
from disnake.ext import commands
from disnake import SelectOption
from aiohttp_socks import ProxyConnector
from pyquery import PyQuery as pq
from dataclasses import dataclass
import aiohttp

RATING = {
    '—Ñ–∞–π–ª –Ω–µ –æ—Ü–µ–Ω–µ–Ω': 0,
    '—Ñ–∞–π–ª –Ω–∞ 1': 1,
    '—Ñ–∞–π–ª –Ω–∞ 2': 2,
    '—Ñ–∞–π–ª –Ω–∞ 3': 3,
    '—Ñ–∞–π–ª –Ω–∞ 4': 4,
    '—Ñ–∞–π–ª –Ω–∞ 5': 5
}

PROXY_ADDRESS = "socks5://192.168.0.100:9050"


class NotFoundBook(commands.CommandError):
    def __str__(self):
        return "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–∏–≥–∞"


class BlockConnectFlibusta(commands.CommandError):
    def __str__(self):
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–∞–ª–µ –ø—Ä–æ–∫—Å–∏"


class MaxRetriesError(commands.CommandError):
    def __str__(self):
        return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"


@dataclass
class Book:
    book_name: str
    author: str
    book_link: str
    book_rating: str

    @classmethod
    def from_div(cls, div: pq) -> Book:
        link = pq(div)("div > a")
        img = pq(div)("img")
        return cls(
            link[0].text,
            link[-1].text,
            link.attr.href,
            img.attr.title
        )


async def search_books(book_name: str) -> str:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–Ω–∏–≥–∞–º–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É"""
    connector = ProxyConnector.from_url(PROXY_ADDRESS, force_close=True)
    reload_count = 0
    while reload_count < 3:
        try:
            async with aiohttp.ClientSession(connector=connector, connector_owner=False) as session:
                async with session.get(
                        f'http://flibusta.is/makebooklist?ab=ab1&t={"+".join(book_name.split(" "))}') as search_result:
                    if search_result.status == 200:
                        result = await search_result.text()
                        print(reload_count)
                        if result == '–ù–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –µ–¥–∏–Ω–æ–π –∫–Ω–∏–≥–∏, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–π –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.':
                            raise NotFoundBook
                        if "–î–æ—Å—Ç—É–ø –∫ —Ä–µ—Å—É—Ä—Å—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!" in result:
                            raise BlockConnectFlibusta
                        else:
                            return result

        except Exception as e:
            if isinstance(e, (NotFoundBook, BlockConnectFlibusta)):
                raise e
            reload_count += 1

    raise MaxRetriesError


async def fetch_books(book_name) -> list[Book]:
    search_result = await search_books(book_name)

    doc = pq(search_result)

    books = [Book.from_div(i) for i in doc.find('div')]

    sotred_books = sorted(books,
                          key=lambda book: RATING[book.book_rating],
                          reverse=True)
    return sotred_books


async def search_image(link_book) -> str | None:
    connector = ProxyConnector.from_url(PROXY_ADDRESS, force_close=True)
    async with aiohttp.ClientSession(connector=connector, connector_owner=False) as session:
        async with session.get(f"http://flibusta.is{link_book}") as book_link:
            result = await book_link.text()
            try:
                soup = BeautifulSoup(result, 'html.parser')
                values = soup.find_all("img", {"alt": "Cover image"})[0]
                doc = pq(str(values)).attr.src
                return doc
            except Exception:
                return None


class Flibusta(commands.Cog):
    def __init__(self, bot):
        self.bot: commands.Bot = bot
        self.user_select_menu = {}
        self.image_channel = 991847730500604056

    async def cog_slash_command_error(self, inter: disnake.ApplicationCommandInteraction, error: Exception) -> None:

        if isinstance(error, (MaxRetriesError, BlockConnectFlibusta)):
            return await inter.send(f"<@262615370773430275>, —Ç—É—Ç –ø–æ —Ç–≤–æ–µ–π —á–∞—Å—Ç–∏ –æ—à–∏–±–æ—á–∫–∞:\n"
                                    f"```{error}```")

        if isinstance(error, NotFoundBook):
            return await inter.send(f"{inter.author.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")

        await super().cog_slash_command_error(inter, error)
        await inter.send(f"<@262615370773430275>, —Ç—É—Ç –ø–æ —Ç–≤–æ–µ–π —á–∞—Å—Ç–∏ –æ—à–∏–±–æ—á–∫–∞, ```{str(error)[:1500]}```")
        raise error

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction):
        if not inter.data.custom_id.startswith("musicplayer_"):
            connector = ProxyConnector.from_url(PROXY_ADDRESS, force_close=True)
            await inter.response.defer()
            custom_id = inter.component.custom_id

            if custom_id == "prev_page":
                paginator_buttons = [
                    disnake.ui.Button(custom_id=f"prev_page", style=disnake.ButtonStyle.green, emoji="‚óÄ"),
                    disnake.ui.Button(custom_id=f"next_page", style=disnake.ButtonStyle.green, emoji="‚ñ∂")]

                self.user_select_menu[inter.author.id]["index"] -= 1
                index = self.user_select_menu[inter.author.id]["index"]
                books: list[list[Book]] = self.user_select_menu[inter.author.id]["list_books"]
                count_books = sum([len(i) for i in books])
                from_ = sum([len(i) for i in books][:index]) + 1
                to = from_ + len(books[index]) - 1

                select_menu = disnake.ui.Select(
                    placeholder=f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {count_books}    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å {from_} –ø–æ {to}",
                    options=[SelectOption(emoji="üìñ",
                                          label=f"{book.book_name[:99]}",
                                          value=book.book_link,
                                          description=f"{book.author[:85]} | {book.book_rating}",
                                          ) for book in books[index]])
                components = []

                if index == 0:
                    paginator_buttons[0].disabled = True
                    components.append(select_menu)
                    components.append(paginator_buttons)
                else:
                    components.append(select_menu)
                return await inter.edit_original_message(components=components)

            if custom_id == "next_page":
                paginator_buttons = [
                    disnake.ui.Button(custom_id=f"prev_page", style=disnake.ButtonStyle.green, emoji="‚óÄ"),
                    disnake.ui.Button(custom_id=f"next_page", style=disnake.ButtonStyle.green, emoji="‚ñ∂")]

                self.user_select_menu[inter.author.id]["index"] += 1
                index = self.user_select_menu[inter.author.id]["index"]
                books: list[list[Book]] = self.user_select_menu[inter.author.id]["list_books"]
                count_books = sum([len(i) for i in books])
                from_ = sum([len(i) for i in books][:index]) + 1
                to = from_ + len(books[index]) - 1

                select_menu = disnake.ui.Select(
                    placeholder=f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {count_books}    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å {from_} –ø–æ {to}",
                    options=[SelectOption(emoji="üìñ",
                                          label=f"{book.book_name[:99]}",
                                          value=book.book_link,
                                          description=f"{book.author[:85]} | {book.book_rating}",
                                          ) for book in books[index]])
                components = []

                if index == len(books) - 1:
                    paginator_buttons[1].disabled = True
                    components.append(select_menu)
                    components.append(paginator_buttons)

                else:
                    components.append(select_menu)

                return await inter.edit_original_message(components=components)

            if custom_id == "back_to_list":
                books: list[list[Book]] = self.user_select_menu[inter.author.id]["list_books"]
                count_books = sum([len(i) for i in books])
                index = self.user_select_menu[inter.author.id]['index']
                components = []

                from_ = sum([len(i) for i in books][:index]) + 1
                to = from_ + len(books[index]) - 1

                select_menu = disnake.ui.Select(
                    placeholder=f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {count_books}    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å {from_} –ø–æ {to}",
                    options=[
                        SelectOption(emoji="üìñ",
                                     label=f"{book.book_name[:99]}",
                                     value=book.book_link,
                                     description=f"{book.author[:85]} | {book.book_rating}",
                                     ) for book in
                        books[self.user_select_menu[inter.author.id]['index']]
                    ])
                components.append(select_menu)
                if count_books > 25:
                    paginator_buttons = [
                        disnake.ui.Button(custom_id=f"prev_page", style=disnake.ButtonStyle.green, emoji="‚óÄ",
                                          disabled=True),
                        disnake.ui.Button(custom_id=f"next_page", style=disnake.ButtonStyle.green, emoji="‚ñ∂"), ]
                    if index == len(books) - 1:
                        paginator_buttons[0].disabled = False
                        paginator_buttons[1].disabled = True

                    components.append(paginator_buttons)

                return await inter.edit_original_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", components=components,
                                                         embed=None, attachments=[])

            else:
                await inter.edit_original_message("–ö–Ω–∏–≥–∞ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ", components=[], embed=None,
                                                  attachments=[])
                async with aiohttp.ClientSession(connector=connector, connector_owner=False) as session:
                    async with session.get(f"http://flibusta.is{custom_id}") as book_file:
                        result = await book_file.read()

                        if "Internal server error" in str(result):
                            embed = self.user_select_menu[inter.author.id]["embed"]
                            await inter.edit_original_message("",
                                                              components=[
                                                                  self.user_select_menu[inter.author.id]["button"]],
                                                              embed=embed)
                            return await inter.send(
                                f"{inter.author.mention}, –∫–Ω–∏–≥–∞ –≤ —ç—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π",
                                delete_after=10)

                        else:
                            filename = cgi.parse_header(book_file.headers['content-disposition'])[1]['filename']
                            content_length = int(book_file.headers['content-length'])
                            if content_length >= 19000000:  # 19 mb
                                await inter.edit_original_message(
                                    "–ö–Ω–∏–≥–∞ –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ 8 –º–µ–≥–∞–±–∞–π—Ç, —è –Ω–µ –º–æ–≥—É —Ç–∞–∫—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"
                                    ", –ø–æ—Ç–æ–º—É —á—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–±–∏–ª")
                                del self.user_select_menu[inter.author.id]
                                return
                            else:
                                data = io.BytesIO(result)
                                file = disnake.File(data, filename=filename)
                                await inter.send(f"{inter.author.mention} –≤–∞—à–∞ –∫–Ω–∏–≥–∞", file=file)
                                await inter.delete_original_message()
                                del self.user_select_menu[inter.author.id]

    @commands.Cog.listener()
    async def on_dropdown(self, inter: disnake.MessageInteraction):
        connector = ProxyConnector.from_url(PROXY_ADDRESS, force_close=True)
        await inter.response.defer()
        await inter.edit_original_message("–û–±—Ä–∞–±–æ—Ç–∫–∞", components=[])
        original_components = inter.component
        selected_value = inter.values[0]
        selected_option = 0
        for compon in original_components.options:
            if compon.value == selected_value:
                selected_option = compon
                break

        buttons = [disnake.ui.Button(custom_id=f"{selected_value}/epub", label="–°–∫–∞—á–∞—Ç—å –≤ epub",
                                     style=disnake.ButtonStyle.green, emoji="üìó", row=1),
                   disnake.ui.Button(custom_id=f"{selected_value}/fb2", label="–°–∫–∞—á–∞—Ç—å –≤ fb2",
                                     style=disnake.ButtonStyle.red, emoji="üìï", row=1),
                   disnake.ui.Button(custom_id=f"{selected_value}/mobi", label="–°–∫–∞—á–∞—Ç—å –≤ mobi",
                                     style=disnake.ButtonStyle.blurple, emoji="üìò", row=1),
                   disnake.ui.Button(custom_id=f"back_to_list", label="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É",
                                     style=disnake.ButtonStyle.gray, emoji="üìö", row=2), ]

        book_rating = RATING[selected_option.description.split('|')[1].lstrip()]

        image_link = await search_image(selected_value)
        image_link_2 = "https://cdn.discordapp.com/attachments/644984473368133652/991794432091361390/unknown.png?size=4096"

        if image_link:
            async with aiohttp.ClientSession(connector=connector, connector_owner=False) as session:
                async with session.get(f"http://flibusta.is{image_link}") as book_file:
                    data = io.BytesIO(await book_file.read())
                    file = disnake.File(data, filename="image.png")
                    image_channel = self.bot.get_channel(self.image_channel)
                    msg = await image_channel.send("", file=file)

        embed = disnake.Embed(title=selected_option.label,
                              description=f"–ê–≤—Ç–æ—Ä: {selected_option.description.split('|')[0]}\n"
                                          f"–û—Ü–µ–Ω–∫–∞: {'‚≠ê' * book_rating if book_rating else '–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏'}")
        embed.set_thumbnail(url=msg.attachments[0].url if image_link else image_link_2)
        self.user_select_menu[inter.author.id]["button"] = buttons
        self.user_select_menu[inter.author.id]["embed"] = embed
        await inter.edit_original_message(content="", embed=embed, components=[buttons])

    @commands.slash_command(name="flibusta", description="–ø–æ–∏—Å–∫ –∫–Ω–∏–≥ –Ω–∞ —Ñ–ª–∏–±—É—Å—Ç–µ")
    async def flibusta(self,
                       inter: disnake.CommandInteraction,
                       book_name: str = commands.Param(name="–Ω–∞–∑–≤–∞–Ω–∏–µ",
                                                       description="–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"), ):
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –Ω–∞ —Ñ–ª–∏–±—É—Å—Ç–µ"""
        await inter.response.send_message(f"–ò—â–µ–º –∫–Ω–∏–≥—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º - **{book_name}**")
        books = await fetch_books(book_name)
        f = lambda list_books, array_length=25: [list_books[i:i + array_length] for i in
                                                 range(0, len(list_books), array_length)]

        books: list[list[Book]] = f(books)
        count_books = sum([len(i) for i in books])
        paginator_buttons = [disnake.ui.Button(custom_id=f"prev_page", style=disnake.ButtonStyle.green, emoji="‚óÄ"),
                             disnake.ui.Button(custom_id=f"next_page", style=disnake.ButtonStyle.green, emoji="‚ñ∂"), ]

        select_menu = disnake.ui.Select(placeholder=f"–í—Å–µ–≥–æ –∫–Ω–∏–≥: {count_books}    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å 1 –ø–æ {len(books[0])}",
                                        options=[
                                            SelectOption(emoji="üìñ",
                                                         label=f"{book.book_name[:99]}",
                                                         value=book.book_link,
                                                         description=f"{book.author[:85]} | {book.book_rating}"
                                                         ) for book in books[0]
                                        ])
        components = [select_menu]

        try:
            del self.user_select_menu[inter.author.id]
        except:
            pass

        self.user_select_menu[inter.author.id] = {"index": 0, "list_books": books, "button": 0, "embed": 0}
        if count_books > 25:
            paginator_buttons[0].disabled = True
            components.append(paginator_buttons)
        await inter.edit_original_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É", components=components)


def setup(bot):
    bot.add_cog(Flibusta(bot))
