import random

from disnake import SelectOption
from datetime import timedelta
from utils import *
from disnake.ext import commands

from wavelink import TrackEventPayload, NodeStatus


class TrackNotFound(commands.CommandError):
    """–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è"""
    pass


class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.user_timer = {}
        self.user_all_time = {}

    async def cog_slash_command_error(self, inter: disnake.ApplicationCommandInteraction, error: Exception) -> None:
        if isinstance(error, TrackNotFound):
            return await inter.send(f"{inter.author.mention} –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç—Ä–µ–∫ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É")

        await super().cog_slash_command_error(inter, error)
        raise error

    async def timeout_check(self, channel_id, guild_id):
        await asyncio.sleep(PLAYER_TIMEOUT)
        if player := self.bot.node.get_player(guild_id):
            channel = self.bot.get_channel(channel_id)
            if len(channel.members) == 1:
                await player.destroy()

    @commands.Cog.listener("on_button_click")
    async def on_player_button(self, interaction: disnake.MessageInteraction):
        if not interaction.data.custom_id.startswith("musicplayer_"):
            return

        await self.player_controller(interaction, interaction.data.custom_id)

    @commands.Cog.listener()
    async def on_voice_state_update(self,
                                    member: disnake.Member,
                                    before: disnake.VoiceState,
                                    after: disnake.VoiceState):
        if before.channel == after.channel:
            return
        if player := self.bot.node.get_player(member.guild.id):
            if member.id == self.bot.user.id and after.channel is None:
                await player.destroy()
                return

            channel = self.bot.get_channel(player.channel.id)

            if len(channel.members) == 1:
                await self.timeout_check(player.channel.id, member.guild.id)
                return

    @commands.Cog.listener("on_wavelink_track_exception")
    @commands.Cog.listener("on_wavelink_track_end")
    @commands.Cog.listener("on_wavelink_track_stuck")
    async def on_player_stop(self, payload: TrackEventPayload):
        payload.player: Player
        if payload.player.loop_mode:
            await payload.player.play(payload.player.looped_track)
            return
        payload.player.update_embed.cancel()
        await payload.player.do_next()

    @commands.Cog.listener("on_dropdown")
    async def on_dropdown_player(self, inter: disnake.MessageInteraction):
        if not inter.data.custom_id.startswith("musicplayer_"):
            return

        player: Player = self.bot.node.get_player(inter.guild.id)
        selected_value = int(inter.values[0])
        await inter.response.edit_message(f"`{player.queue._queue[selected_value].title}` —É–¥–∞–ª–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏",
                                          components=[])
        del player.queue._queue[selected_value]
        await player.invoke_controller()

    async def player_controller(self, interaction: disnake.MessageInteraction, control: str):
        player: Player = self.bot.node.get_player(interaction.guild.id)
        await interaction.response.defer()
        print(player)
        if player:
            if interaction.message.id == player.message_controller.id:
                match control:

                    case PlayerControls.PLAY:
                        await player.set_paused()

                    case PlayerControls.PAUSE:
                        await player.set_paused()

                    case PlayerControls.STOP:
                        await player.destroy()
                        await interaction.edit_original_message(components=[])

                    case PlayerControls.SKIP:
                        await player.stop()

                    case PlayerControls.SHUFFLE:
                        if player.queue.qsize() < 3:
                            return await interaction.channel.send("–ú–∞–ª–æ –ø–µ—Å–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è")
                        random.shuffle(player.queue._queue)
                        await interaction.channel.send("–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞")

                    case PlayerControls.LOOP_MODE:
                        if player.loop_mode:
                            player.loop_mode = False
                            await interaction.channel.send("–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω")
                        else:
                            player.loop_mode = True
                            player.looped_track = player.current
                            await interaction.channel.send("–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω")

                    case PlayerControls.ADD_TO_PLAYLIST:
                        playlists = json.load(open("playlists.json"))
                        print(playlists)

                    case PlayerControls.REMOVE_FROM_PLAYLIST:
                        pass

    async def connect(self,
                      inter: disnake.CommandInteraction | disnake.Message,
                      user: disnake.Member,
                      channel: disnake.VoiceChannel = None):
        player = Player(inter=inter, bot=self.bot)

        channel = getattr(user.voice, 'channel', channel)

        if channel is None:
            await inter.channel.send(f"{user.mention} –≤—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ")
            return
        else:
            await channel.connect(cls=player)
            return player

    @commands.slash_command(name="play", )
    async def play(self,
                   inter: disnake.CommandInteraction,
                   search: str = commands.Param(description="URL –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞", )):
        await inter.response.defer()
        player: Player = self.bot.node.get_player(inter.guild.id)
        if player is None or player.current_node.status == NodeStatus.DISCONNECTED:
            player = await self.connect(inter, inter.user)
        player.inter = inter
        await player.add_tracks(search)

    @commands.slash_command(name="seek",
                            description="–ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å —Ç—Ä–µ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ")
    async def seek(self,
                   inter: disnake.CommandInteraction,
                   minutes: commands.Range[1, ...] = commands.Param(name="–º–∏–Ω—É—Ç–∞",
                                                                    description="–ù–∞ –∫–∞–∫—É—é –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å",
                                                                    default=None),
                   seconds: commands.Range[0, 60] = commands.Param(name="—Å–µ–∫—É–Ω–¥–∞",
                                                                   description="–ù–∞ –∫–∞–∫—É—é —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∞—Ç—å", )):
        player: Player = self.bot.node.get_player(inter.guild)
        minutes: int
        seconds: int
        if player and player.is_playing():
            position = seconds + (minutes * 60000) if minutes else seconds * 1000
            human_position = seconds + (minutes * 60) if minutes else seconds
            if position > (player.track.length * 60000):
                await inter.response.send_message(f"–¢—Ä–µ–∫ —Å—Ç–æ–ª—å–∫–æ –Ω–µ –¥–ª–∏—Ç—Å—è", delete_after=15)
                return
            await player.seek(position)
            await inter.response.send_message(
                f"–¢—Ä–µ–∫ –ø–µ—Ä–µ–º–æ—Ç–∞–Ω –Ω–∞ {time.strftime('%M:%S', time.gmtime(human_position))}")
        else:
            await inter.response.send_message(f"–ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç", delete_after=15)

    @commands.slash_command(name="volume",
                            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏")
    async def set_volume(self,
                         inter: disnake.CommandInteraction,
                         volume: commands.Range[0, 100] = commands.Param(name="–≥—Ä–æ–º–∫–æ—Å—Ç—å",
                                                                         description="–ù–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")):
        player: Player = self.bot.node.get_player(inter.guild)
        volume: int
        if player and player.is_playing():
            await player.set_volume(volume)
            await inter.response.send_message(f"–ì—Ä–æ–º–∫–æ—Å—Ç—å –ø–ª–µ–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {volume}%", delete_after=10)
        else:
            await inter.response.send_message(f"–ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç", delete_after=15)

    @commands.slash_command(name="remove",
                            description="–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")
    async def remove_track(self, inter: disnake.CommandInteraction):
        player: Player = self.bot.node.get_player(inter.guild)
        if player and player.is_playing():
            qsize = player.queue.qsize()
            if qsize > 0:
                select_menu = disnake.ui.Select(
                    placeholder=f"–í—Å–µ–≥–æ —Ç—Ä–µ–∫–æ–≤: {qsize}    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å 1 –ø–æ {qsize}",
                    options=[SelectOption(emoji="üéµ",
                                          label=f"{ind + 1} - {tr.title[:95]}",
                                          value=f"{ind}",
                                          description=f"{time.strftime('%M:%S', time.gmtime(tr.length))}") for ind, tr
                             in tuple(enumerate(player.queue._queue))[:25]
                             ],
                    custom_id="musicplayer_dropdown")
                await inter.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π —Ç—Ä–µ–∫ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", components=[select_menu])
            else:
                await inter.response.send_message("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞", delete_after=10)
        else:
            await inter.response.send_message(f"–ú—É–∑—ã–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç", delete_after=15)

    @commands.slash_command(name="move",
                            description="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª")
    async def move_bot(self, inter: disnake.CommandInteraction, channel: disnake.VoiceChannel):
        if player := self.bot.node.get_player(inter.guild):
            await player.move_to(channel)
            await inter.response.send_message(f"–Ø –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ {channel.mention}", delete_after=10)
        else:
            await inter.response.send_message(f"–Ø —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞—é –º—É–∑—ã–∫—É", delete_after=10)

    @commands.slash_command(name="qclear",
                            description="–û—á–∏—â–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å")
    async def clear_queue(self, inter: disnake.CommandInteraction):
        if player := self.bot.node.get_player(inter.guild):
            player.queue = asyncio.Queue()
            await inter.response.send_message(f"–û—á–µ—Ä–µ–¥—å –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞", delete_after=10)
        else:
            await inter.response.send_message(f"–Ø —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞—é –º—É–∑—ã–∫—É", delete_after=10)

    @commands.slash_command(name="stop",
                            description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º—É–∑—ã–∫—É")
    async def stop(self, inter: disnake.CommandInteraction):
        if player := self.bot.node.get_player(inter.guild):
            await player.destroy()
            await inter.response.send_message(f"–ê –≤—Å—ë, –∫–æ–Ω–µ—Ü", delete_after=10)
        else:
            await inter.response.send_message(f"–Ø —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞—é –º—É–∑—ã–∫—É", delete_after=10)

    @commands.slash_command(name="skip",
                            description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç—Ä–µ–∫")
    async def skip(self, inter: disnake.CommandInteraction):
        if player := self.bot.node.get_player(inter.guild):
            await player.stop()
            await inter.response.send_message(f"`{player.track.title}` –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω", delete_after=10)
        else:
            await inter.response.send_message(f"–Ø —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞—é –º—É–∑—ã–∫—É", delete_after=10)

    @commands.slash_command(name="test",
                            description="test")
    async def test(self, inter: disnake.CommandInteraction):
        player: Player = self.bot.node.get_player(inter.guild.id)
        print(player.current_node.status)
        print(type(player.current_node.status))


def setup(bot: commands.Bot):
    bot.add_cog(Music(bot))
